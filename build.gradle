buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.asciidoctor.jvm.convert' version '4.0.2'
}

subprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'
    apply plugin: 'org.asciidoctor.jvm.convert'

    group = 'com.dcm'
    version = '1.0'
    sourceCompatibility = '21'

    repositories {
        mavenCentral()
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
        asciidoctorExt
    }

    ext {
        snippetsDir = file('build/generated-snippets')
    }

    asciidoctor {
        configurations 'asciidoctorExt'
        baseDirFollowsSourceFile()
        inputs.dir snippetsDir
        dependsOn test
    }

    asciidoctor.doFirst {
        delete file('src/main/resources/static/docs')
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'org.springframework.boot:spring-boot-starter-webflux'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-test'

        runtimeOnly 'com.h2database:h2'
        compileOnly "org.projectlombok:lombok"
        annotationProcessor "org.projectlombok:lombok"
        testCompileOnly "org.projectlombok:lombok"
        testAnnotationProcessor "org.projectlombok:lombok"

        testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
        testImplementation 'org.junit.jupiter:junit-jupiter-api'

        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    }

    tasks.named('test') {
        useJUnitPlatform()
        outputs.dir snippetsDir
    }

    task copyDocument(type: Copy) {
        dependsOn asciidoctor
        from file("build/docs/asciidoc")
        into file("src/main/resources/static/docs")
    }

    tasks.named('compileJava') {
        inputs.files(tasks.named('processResources'))
    }

    build {
        dependsOn copyDocument
    }
}

task buildAll {
    dependsOn subprojects*.build
}